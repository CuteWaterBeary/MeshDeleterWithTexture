#pragma kernel CSMain

RWTexture2D<float4> UVMap;

StructuredBuffer<float2> UVs;
StructuredBuffer<int> Triangles;

int Width;
int Height;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int p1Index = Triangles[id.x * 3];
	int p2Index = Triangles[id.x * 3 + 1];
	int p3Index = Triangles[id.x * 3 + 2];

	float2 uv1 = UVs[p1Index];
	float2 uv2 = UVs[p2Index];
	float2 uv3 = UVs[p3Index];

	uint2 p1Pos = uint2(uv1.x * Width, uv1.y * Height);
	uint2 p2Pos = uint2(uv2.x * Width, uv2.y * Height);
	uint2 p3Pos = uint2(uv3.x * Width, uv3.y * Height);

	float4 color = float4(1, 1, 1, 1);

	// p1からp2まで線を引く
	int2 diffp12 = int2(p2Pos.x-p1Pos.x, p2Pos.y-p1Pos.y);
	float distp12 = distance(p1Pos, p2Pos);
	for (int i = 0; i < distp12; i++) 
	{
		UVMap[p1Pos + diffp12 / distp12 * i] = color;	
	}


	// p2からp3まで線を引く
	int2 diffp23 = int2(p3Pos.x-p2Pos.x, p3Pos.y-p2Pos.y);
	float distp23 = distance(p2Pos, p3Pos);
	for (int i = 0; i < distp23; i++) 
	{
		UVMap[p2Pos + diffp23 / distp23 * i] = color;	
	}

	// p3からp1まで線を引く
	int2 diffp31 = int2(p1Pos.x-p3Pos.x, p1Pos.y-p3Pos.y);
	float distp31 = distance(p3Pos, p1Pos);
	for (int i = 0; i < distp31; i++) 
	{
		UVMap[p3Pos + diffp31 / distp31 * i] = color;	
	}
}
